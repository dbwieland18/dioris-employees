{"version":3,"sources":["componentes/header/header.js","componentes/table/components/tableRow.js","componentes/table/tableContext.js","componentes/table/tableHeader/tableHeader.js","AppContext.js","componentes/table/table.js","componentes/searchInput/searchInput.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TableRow","props","person","name","email","phone","first","last","TableContext","React","createContext","EventContext","TableHeader","tableContext","useContext","eventContext","text","sortBy","data-id","onClick","onTableHeaderClick","AppContext","AppEventContext","Table","useState","setSortBy","searchText","event","id","currentTarget","getAttribute","console","log","sortedData","data","filter","RegExp","test","sort","a","b","aName","bName","localeCompare","Provider","value","border","map","key","SearchInput","appContext","appEventContext","onChange","onSeachInputChange","App","setSearchText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.751c951c.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header() {\n    return (\n        <h1 className=\"header\">Employee Directory</h1>\n    )\n\n    }\n\n\nexport default Header;","import React from 'react';\n\nfunction TableRow(props) {\n\tconst {\n        person\t\n\t} = props;\n     const {\n        name,\n        email,\n        phone,\n     } = person;   \n\treturn (\n\t\t<tr>\n\t\t\t<td>{`${name.first} ${name.last}`}</td>\n\t\t\t<td>{email}</td>\n\t\t\t<td>{phone}</td>\n\t\t\t{/* <td>{nat}</td> */}\n\t\t</tr>\n\t)\n}\nexport default TableRow","import React from \"react\"\n\nexport const TableContext = React.createContext();\nexport const EventContext = React.createContext();","import React from \"react\";\nimport {EventContext} from \"../tableContext\";\nimport {TableContext} from \"../tableContext\";\n\n\n\nfunction TableHeader(props) {\n    const tableContext = React.useContext(TableContext);\n    const eventContext = React.useContext(EventContext);\n        // console.log(context)\n    const {\n        text\t\n    } = props;\n\n    const {\n        sortBy\n    } = tableContext;\n    \n    return(\n    <th\n        data-id={text}\n        onClick={eventContext.onTableHeaderClick}\n    >\n        \n    {text}\n    {sortBy === text && 'sorted'}\n  </th>\n    )\n}\n\nexport default TableHeader","import React from \"react\";\n\n\nexport const AppContext = React.createContext();\nexport const AppEventContext = React.createContext();\n\n    ","import React from \"react\";\nimport data from \"../Data/data.json\";\nimport TableRow from \"../table/components/tableRow\";\nimport TableHeader from \"./tableHeader/tableHeader\";\nimport { EventContext } from \"../table/tableContext\";\nimport { TableContext } from \"../table/tableContext\";\nimport { AppContext } from \"../../AppContext\";\n\nfunction Table() {\n  const [sortBy, setSortBy] = React.useState();\n//   const [sortOrder, setSortOrder] = React.useState();\n\nconst {searchText} = React.useContext(AppContext);\n\n  // console.log(data)\n  const handleTableHeaderClick = (event) => {\n    const target = event.currentTarget;\n    const id = target.getAttribute(\"data-id\");\n    setSortBy(id);\n\n    console.log(id);\n  };\n\n  const tableContext = {\n    sortBy,\n    // sortOrder,\n  };\n\n  const eventContext = {\n    onTableHeaderClick: handleTableHeaderClick,\n  };\n\n\n  let sortedData = [...data];\n  if(searchText !== ''){\n      sortedData = sortedData.filter(({email})=> new RegExp(searchText, 'g').test(email))\n  }\n\n  switch (sortBy) {\n    case \"Name\":\n        sortedData = sortedData.sort((a, b) => {\n            const aName = `${a.name.first} ${a.name.last}`;\n            const bName = `${b.name.first} ${b.name.last}`;\n            return aName.localeCompare(bName)\n        })\n      break;\n\n    case \"Email\":\n        sortedData = sortedData.sort((a, b) => a.email.localeCompare(b.email))\n      break;\n\n    case \"Phone\":\n        sortedData = sortedData.sort((a, b) => a.phone.localeCompare(b.phone))\n      break;\n\n    default:\n      break;\n  }\n\n  return (\n    <TableContext.Provider value={tableContext}>\n      <EventContext.Provider value={eventContext}>\n        <table border={1}>\n          <thread>\n            <tr>\n              <TableHeader\n                text=\"Name\"\n                // sort={}\n              />\n              <TableHeader text=\"Email\" />\n              <TableHeader text=\"Phone\" />\n            </tr>\n          </thread>\n          <tbody>\n            <tr>\n              {sortedData.map((person) => (\n                <TableRow key={person.phone} person={person} />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </EventContext.Provider>\n    </TableContext.Provider>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport { AppContext } from \"../../AppContext\";\nimport { AppEventContext } from \"../../AppContext\";\n\n\n\nfunction SearchInput() {\n    const appContext = React.useContext(AppContext)\n    const appEventContext = React.useContext(AppEventContext)\n    return(\n        <input  \n            value={appContext.searchText}\n            onChange={appEventContext.onSeachInputChange }\n        />\n    )\n}\n\nexport default SearchInput;","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"./index.css\";\nimport Header from \"../src/componentes/header/header\";\nimport Table from \"./componentes/table/table\";\nimport SearchInput from \"./componentes/searchInput/searchInput\";\nimport { AppContext } from \"./AppContext\";\nimport { AppEventContext } from \"./AppContext\";\n\n\nfunction App() {\n  const [searchText, setSearchText] = React.useState('');\n\n  const handleInputChange = (event) => {\n    console.log(event)\n\n    setSearchText(event.currentTarget.value);\n\n  } \n\n  const appContext = {\n    searchText,\n  }\n\n  const appEventContext = {\n    onSeachInputChange: handleInputChange\n  }\n\n  return (\n    <AppContext.Provider value={appContext}>\n       <AppEventContext.Provider value={appEventContext}>\n      <div className=\"App\">\n        <Header />\n        <SearchInput />\n        <Table />\n      </div>\n      </AppEventContext.Provider>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}